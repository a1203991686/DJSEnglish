<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.djsenglish.dao.ArticleCommentMapper">
  <resultMap id="BaseResultMap" type="com.djsenglish.pojo.ArticleComment">
    <constructor>
      <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="article" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="user" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="text" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="likes" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="update_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="create_time" javaType="java.util.Date" jdbcType="TIMESTAMP" />
    </constructor>
  </resultMap>
  <sql id="Base_Column_List">
    id, article, user, text, likes, update_time, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from article_comment
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="selectCommentList" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from article_comment
    where article = #{articleId}
    order by create_time DESC
  </select>
    <select id="selectCountByPrimaryKey" parameterType="int" resultType="int">
      select count(*)
      from article_comment
      where id = #{id}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from article_comment
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteComment" parameterType="map">
      delete  from article_comment
      where id = #{id}
      and user = #{userId}
    </delete>
    <insert id="insert" parameterType="com.djsenglish.pojo.ArticleComment">
    insert into article_comment (id, article, user,
      text, likes, update_time,
      create_time)
    values (#{id,jdbcType=INTEGER}, #{article,jdbcType=INTEGER}, #{user,jdbcType=INTEGER},
      #{text,jdbcType=VARCHAR}, #{likes,jdbcType=INTEGER}, now(),
      now())
  </insert>
  <insert id="insertSelective" parameterType="com.djsenglish.pojo.ArticleComment">
    insert into article_comment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="article != null">
        article,
      </if>
      <if test="user != null">
        user,
      </if>
      <if test="text != null">
        text,
      </if>
      <if test="likes != null">
        likes,
      </if>
        update_time,
        create_time,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="article != null">
        #{article,jdbcType=INTEGER},
      </if>
      <if test="user != null">
        #{user,jdbcType=INTEGER},
      </if>
      <if test="text != null">
        #{text,jdbcType=VARCHAR},
      </if>
      <if test="likes != null">
        #{likes,jdbcType=INTEGER},
      </if>
        now(),
        now(),
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.djsenglish.pojo.ArticleComment">
    update article_comment
    <set>
      <if test="article != null">
        article = #{article,jdbcType=INTEGER},
      </if>
      <if test="user != null">
        user = #{user,jdbcType=INTEGER},
      </if>
      <if test="text != null">
        text = #{text,jdbcType=VARCHAR},
      </if>
      <if test="likes != null">
        likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null">
        update_time = now(),
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.djsenglish.pojo.ArticleComment">
    update article_comment
    set article = #{article,jdbcType=INTEGER},
      user = #{user,jdbcType=INTEGER},
      text = #{text,jdbcType=VARCHAR},
      likes = #{likes,jdbcType=INTEGER},
      update_time = now(),
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateByPrimaryKeyAddLike">
        update  article_comment
        set likes = likes + 1
        where id = #{commentId}
    </update>
    <update id="updateByPrimaryKeyDisLike">
        update  article_comment
        set likes = likes - 1
        where id = #{commentId}
    </update>
</mapper>